function GetSelectedSymbol: integer;
begin
    return g_TopArrowPosition + g_LeftArrowPosition + 1;
end;

function IsSymbolPlayable(symbolId: integer): integer;
    i: integer;
begin
    for i := 1 to 9
    loop
        if (g_arrPlayer1Symbols[i] = symbolId
            or g_arrPlayer2Symbols[i] = symbolId) then
            return FALSE;
        end if;
    end loop;

    return TRUE;
end;

procedure StoreSelectedSymbol(playerNumber: integer);
begin
    if (playerNumber = 1) then
        g_arrPlayer1Symbols[g_SelectedSymbol] := g_SelectedSymbol;
    elsif (playerNumber = 2) then
        g_arrPlayer2Symbols[g_SelectedSymbol] := g_SelectedSymbol;
    end if;
end;

procedure DrawSelectedSymbol(playerNumber: integer);
    symbolId: integer;
begin
    if (playerNumber = 1) then
        symbolId := STARTING_CIRCLE_ID + g_SelectedSymbol - 1;
    elsif (playerNumber = 2) then
        symbolId := STARTING_SQUARE_ID + g_SelectedSymbol - 1;
    end if;

    SetSymbolState(symbolId, DEFAULT_STATE);
end;

procedure RestartArrowsPosition;
begin
    g_TopArrowPosition := 0;
    g_LeftArrowPosition := 0;
    DrawArrow(g_TopArrowPosition, STARTING_TOP_ARRROW_ID, TOP_ARROW_INCREMENT);
    DrawArrow(g_LeftArrowPosition, STARTING_LEFT_ARRROW_ID, LEFT_ARROW_INCREMENT);
end;


procedure GoToNextTurn;
begin
    if (g_CurrentPlayer = 1) then
        g_CurrentPlayer := 2;
    elsif (g_CurrentPlayer = 2) then
        g_CurrentPlayer := 1;
    end if;
    RestartArrowsPosition;
    -- PINTAR TURNO
end;

procedure SetRoundWinner(playerNumber: integer);
begin
    if (playerNumber = 1) then
        g_Player1Score := g_Player1Score + 1;
        -- label ganador
    elsif (playerNumber = 2) then
        g_Player2Score := g_Player2Score + 1;
        -- label ganador
    end if;
end;

function ArrayMatch(arr1: arrIntegers; arr2: arrIntegers): integer;
    i: integer;
begin
    for i := 1 to 9
    loop
        if (arr1[i] <> arr2[i]) then
            return FALSE;
        end if;
    end loop;
    return TRUE;
end;

function IsWinnerPlay(arrSymbols: arrIntegers): integer;
    winnerArray: arrIntegers;
    strippedArray: arrIntegers;
    i: integer;
begin
    for i := 1 to 9
    loop
        strippedArray[i] := 0;
    end loop;

    strippedArray[1] := arrSymbols[1];
    strippedArray[2] := arrSymbols[2];
    strippedArray[3] := arrSymbols[3];

    for i := 1 to 9
    loop
        winnerArray[i] := 0;
    end loop;

    winnerArray[1] := 1;
    winnerArray[2] := 2;
    winnerArray[3] := 3;

    if (ArrayMatch(strippedArray, winnerArray) = TRUE) then
        return TRUE;
    end if;

    return FALSE;
end;

procedure DrawWinnerPlay(playerNumber: integer);
    i: integer;
    symbolId: integer;
    winnerArray: arrIntegers;
begin
    if (playerNumber = 1) then
        symbolId := STARTING_CIRCLE_ID;
        winnerArray := g_arrPlayer1Symbols;
    elsif (playerNumber = 2) then
        symbolId := STARTING_SQUARE_ID;
        winnerArray := g_arrPlayer2Symbols;
    end if;

    for i := 1 to 9
    loop
        if (winnerArray[i] <> 0) then
            SetSymbolState(symbolId + i - 1, FILL_STATE);
        end if;
    end loop;
end;

procedure CheckForWin;
    winnerPlayer: integer;
begin
    winnerPlayer := 0;
    if (IsWinnerPlay(g_arrPlayer1Symbols) = TRUE) then
        winnerPlayer := 1;
    elsif (IsWinnerPlay(g_arrPlayer2Symbols) = TRUE) then
        winnerPlayer := 2;
    end if;

    if (winnerPlayer = 0) then
        return;
    end if;

    DrawWinnerPlay(winnerPlayer);
    SetRoundWinner(winnerPlayer);
    DisableHandler(EnterKeyPressed);
end;